var player;

$(document).ready(function () {
    //onYouTubeIframeAPIReady();
    if (navigator.userAgent.indexOf('Mac') > 0) { $('body').addClass('mac_os') } // add class to target Mac browsers

    initLevel1Nav();
    initLevel3Nav();
    initFooter();

    $(".overlay-close").click(function (event) {
        event.preventDefault();
        closeThisOverlay();
    });

    $(window).resize(function () {
        repositionOverlay();
    });

});

function launch(newURL, newName, newFeatures, orgName) {
    var remote = open(newURL, newName, newFeatures);
    if (remote.opener == null)
        remote.opener = window;

    remote.opener.name = orgName;
    return remote;
}

function popWindow(url, sb, rz, w, h, mn, tl, tt) {
    if (mn == null) {
        mn = 'no';
    }
    if (tl == null) {
        tl = 'no';
    }
    if (tt == null) {
        tt = 'pop_window';
    }

    myRemote = launch(url,
            tt,
            "toolbar=" + tl + ",status=no,menubar=" + mn + ",scrollbars=" + sb + ",resizable=" + rz + ",width=" + w + ",height=" + h,
            "parent_opener");
}

function closeWindow() {
    window.close();
}

function onYouTubeIframeAPIReady() {
    //player = new YT.Player('player');
}

function stopDemoPlayer() {
    if (player) {
        //player.stopVideo();
    }
}

function initLevel1Nav() {
    $("#View-Cart").css("width", $("#cart_total").width() + 50).parents("#Level-1-Nav").animate({ 'opacity': '1', 'filter': 'Alpha(Opacity=100)' });
}

function initLevel3Nav() {
    /* nav link position had to be positioned absolute because of the precision required for sub navs line up on Mac & PC browsers */
    var linkPos = parseInt($("#Level-3-Nav #Link-1").css("left"));
    var config = {
        over: showSubmenu, // function = onMouseOver callback (REQUIRED)   
        interval: 50,
        out: hideSubmenu // function = onMouseOut callback (REQUIRED)    
    };
    $("#Level-3-Nav .main-nav .level-1").each(function (index) {
        var len = $(this).innerWidth();
        if (index > 0)
            $(this).css("left", linkPos);
        linkPos += len;
    });
    $("#Level-3-Nav").css('visibility','visible').fadeIn();
    if ($("#Level-3-Nav").length > 0) 
        $("#Level-3-Nav .level-1").hoverIntent(config);
    $("#Level-2-Nav .level-1").hoverIntent(config);

    function showSubmenu() {
        $(this).find(".sub-nav").fadeIn(200).animate({ top: '27px' },
            { queue: false, duration: 200, easing: 'linear' })
    }

    function hideSubmenu() {
        $(this).find(".sub-nav").css({ 'top': '18px' }).hide();
    }
}

function initFooter() {
    $("#Sign-Up input").focus(function () {
        if ($(this).val() == $(this).attr("title")) {
            $(this).val("");
        }
    }).blur(function () {
        if ($(this).val() == "") {
            $(this).val($(this).attr("title"));
        }
    });
}

function initTabs() {
    $(".tab-buttons > ul").each(function () {
        var $this = $(this);
        var dim = getObjDimPos($this);
        var tabPanelLength = dim.oOuterWidth;
        var tabCount = $this.find("li").length;
        $this.find("li a").css("width", (tabPanelLength - tabCount) / tabCount);
    });
}

function getParameterByName(name) {
    name = name.replace(/[\[]/, "\\\[").replace(/[\]]/, "\\\]");
    var regexS = "[\\?&]" + name + "=([^&#]*)";
    var regex = new RegExp(regexS);
    var results = regex.exec(window.location.search);
    if (results == null)
        return "";
    else
        return decodeURIComponent(results[1].replace(/\+/g, " "));
}

function getObjDimPos(obj) {
    var $obj = $(obj);
    var objWidth = $obj.getHiddenDimensions().width;
    var objHeight = $obj.getHiddenDimensions().height;
    var objInnerWidth = $obj.getHiddenDimensions().innerWidth;
    var objInnerHeight = $obj.getHiddenDimensions().innerHeight;
    var objOuterWidth = $obj.getHiddenDimensions(true).outerWidth;
    var objOuterHeight = $obj.getHiddenDimensions(true).outerHeight;
    var pageTop = $(document).scrollTop();
    if ($(window).height() < objHeight) { var objTop = 30; }
    else { var objTop = ($(window).height() - objHeight) / 2; }
    var objLeft = ($(window).width() - objWidth) / 2;
    var obj = {
        oWidth: objWidth,
        oHeight: objHeight,
        oInnerWidth: objInnerWidth,
        oInnerHeight: objInnerHeight,
        oOuterWidth: objOuterWidth,
        oOuterHeight: objOuterHeight,
        oTop: objTop,
        oLeft: objLeft,
        dWidth: $(document).width(),
        dHeight: $(document).height(),
        wWidth: $(window).width(),
        wHeight: $(window).height(),
        sWidth: screen.width,
        sHeight: screen.height
    };
    return obj;
}

jQuery(function ($) {
    $.fn.getHiddenDimensions = function (includeMargin) {
        var $item = this,
      props = { position: 'absolute', visibility: 'hidden', display: 'block' },
      dim = { width: 0, height: 0, innerWidth: 0, innerHeight: 0, outerWidth: 0, outerHeight: 0 },
      $hiddenParents = $item.parents().andSelf().not(':visible'),
      includeMargin = (includeMargin == null) ? false : includeMargin;

        var oldProps = [];
        $hiddenParents.each(function () {
            var old = {};

            for (var name in props) {
                old[name] = this.style[name];
                this.style[name] = props[name];
            }

            oldProps.push(old);
        });

        dim.width = $item.width();
        dim.outerWidth = $item.outerWidth(includeMargin);
        dim.innerWidth = $item.innerWidth();
        dim.height = $item.height();
        dim.innerHeight = $item.innerHeight();
        dim.outerHeight = $item.outerHeight(includeMargin);

        $hiddenParents.each(function (i) {
            var old = oldProps[i];
            for (var name in props) {
                this.style[name] = old[name];
            }
        });

        return dim;
    }
} (jQuery));

function showOverlay(type, prop1) {
    if (type == 'video')
    {
        var $overlay = $("#Video-Overlay");
        $overlay.find("iframe").attr("src", "http://www.youtube.com/embed/" + prop1 + "?enablejsapi=1&wmode=transparent");
    }
    else if (type == 'gallery') 
    {
        var $overlay = $("#Other-Overlay");
        if (!$overlay.length == 0) {
            $overlay.html($(prop1));
            $(prop1).show();
        }
    }
    else {
        $(prop1).show();
        var $overlay = $("#Other-Overlay");
        $overlay.html($(prop1));
    }
    var dim = getObjDimPos($overlay);
    $overlay.fadeIn();
    $("#Overlay-Mask,#Overlay").fadeIn();
    $("#Overlay-Mask").css({ "width": dim.dWidth, "height": dim.dHeight });
    $("#Overlay").css({ "top": dim.oTop, "left": dim.oLeft, "width": dim.oWidth, "height": dim.oHeight });

}

function repositionOverlay() {
    var dim = getObjDimPos($("#Overlay"));
    $("#Overlay").css({ "top": dim.oTop, "left": dim.oLeft });
}

function closeThisOverlay() {
    $("#Overlay").attr("style","");
    $(".overlay-content,#Overlay-Mask,#Overlay").fadeOut();
    if (!$("#Image-Gallery") == 0) {
        $("body").append($("#Image-Gallery"));
        $("#Media-Thumbs").empty().attr("style","");
        $("#Media-Paging").empty().attr("style","");
        $("#Image-Gallery").hide();
    }
    if (!$("#Video-Overlay iframe").attr("src").length == 0) {
        //stopDemoPlayer();
    }
    if ($("#Other-Overlay").contents()) {
        $("#Other-Overlay").children("div").hide();
        $(".compareCategory2").empty();
        $(".compareList2").empty();
        $("body").append($("#Other-Overlay").contents());
    }
}

